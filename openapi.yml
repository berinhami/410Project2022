openapi: 3.0.3
info:
  title: Sudoku API
  version: v1
paths:
  /accounts:
    x-controller: accounts
    post:
      x-operation: createAccount
      tags:
        - Accounts
      summary: Create an account
      requestBody:
        required: true
        content: 
          application/json:
            schema:
              type: object
              required:
                - username
                - firstname
                - lastname
                - password
              properties:
                username:
                  type: string
                firstname:
                  type: string
                lastname:
                  type: string
                password: 
                  type: string
                  format: password
            example:
              username: bingbong22
              firstname: bing
              lastname: bong
              password: goodPassword
      responses: 
        201:
          description: Account Created
        400:
          description: Invalid Request
        409:
          description: Account Already Exists
  /accounts/{userid}:
    x-controller: accounts
    parameters:
      - $ref: '#/components/parameters/PathUserId'
    get:
      x-operation: getAccount
      tags:
        - Accounts
      summary: Gets an account
      responses:
        200:
          description: Got Account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        401:
          description: Not authenticated
        403:
          description: Also not authenticated
    patch:
      x-operation: updateAccount
      tags:
        - Accounts
      summary: Update an account
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                firstname:
                  type: string
                lastname:
                  type: string
                password:
                  type: string
                  format: password
                  minLength: 1
      responses:
        200:
          description: Account updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        400:
          description: Invalid request
        401:
          description: Not authenticated
        403:
          description: Access denied
        404:
          description: Not found
    delete:
      x-operation: deleteAccount
      tags:
        - Accounts
      summary: Delete an account
      responses:
        204:
          description: Account deleted
        401:
          description: Not authenticated
        403:
          description: Also not authenticated
  /accounts/{userid}/login:
    x-controller: accounts
    parameters:
      - $ref: '#/components/parameters/PathUserId'
    put:
      x-operation: login
      tags: 
        - Accounts
      summary: loggs a user in
      requestBody:
        required: true
        content: 
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  format: username
                password: 
                  type: string
                  format: password
            example:
              username: bingbong22
              password: goodPassword
      responses: 
        200:
          description: logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        400:
          description: invalid request
        403:
          description: access denied
  /accounts/{userid}/logout:
    x-controller: accounts
    parameters:
      - $ref: '#/components/parameters/PathUserId'
    put:
      x-operation: logout
      tags: 
        - Accounts
      summary: loggs a user out
      responses: 
        200:
          description: logged out
        403:
          description: access denied
  /puzzles:
    x-controller: puzzles
    post:
      x-operation: createPuzzle
      tags:
        - Puzzles
      summary: Create a Puzzle
      parameters:
        - name: completed
          in: query
          schema:
            type: boolean
      requestBody:
        required: true
        content: 
          application/json:
            schema:
              type: object
              required:
                - puzzleDifficulty
                - originalNumbers
              properties:
                puzzleDifficulty:
                  type: integer
                originalNumbers:
                  type: array
                  items:
                    type: integer
            example:
              puzzleDifficulty: 1
              originalNumbers: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
      responses: 
        201:
          description: Puzzle Created
        400:
          description: Invalid request.
        401:
          description: Not authenticated.
  /puzzles/{puzzleid}:
    x-controller: puzzles
    parameters:
      - $ref: '#/components/parameters/PathPuzzleId'
    delete:
      x-operation: deletePuzzle
      tags:
        - Puzzles
      summary: Delete a puzzle
      responses:
        204:
          description: puzzle deleted
        401:
          description: not authenticate
        403:
          description: access denied
        404:
          description: puzzle not found
    get:
      x-operation: getPuzzle
      tags:
        - Puzzels
      summary: Get a puzzle
      responses:
        200:
          description: got the puzzle
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Puzzle'
        401:
          description: not authenticate
        403:
          description: access denied
        404:
          description: puzzle not found
  /puzzles/{puzzleid}/cells/{cellid}:
    x-controller: puzzles
    parameters:
      - $ref: '#/components/parameters/PathPuzzleId'
      - $ref: '#/components/parameters/PathCellId'
    put:
      x-operation: updatePuzzle
      tags:
        - Numbers
      summary: Number is changed
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userEnteredNumbers
              properties:
                number:
                  type: integer
                  format: number
            example:
              userEnteredNumbers: 4
      responses: 
        200:
          description: number changed
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Puzzle'
        400:
          description: invalid request
        401:
          description: not authenticated
    get:
      x-operation: getNumber
      tags:
        - Numbers
      summary: Get a number
      responses:
        200:
          description: got number
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Puzzle'
        400:
          description: invalid request
        401:
          description: not authenticated
        404:
          description: not found
components:
  parameters:
    PathUserId:
      name: userid
      in: path
      required: true
      schema:
        type: string
    PathPuzzleId:
      name: puzzleid
      in: path
      required: true
      schema:
        type: string
    PathCellId:
      name: cellid
      in: path
      required: true
      schema:
        type: string
  schemas:
    Account:
      type: object
      properties: 
        username:
          type: string
        firstname:
          type: string
        lastname:
          type: string
        password:
          type: string
          writeOnly: true
    Puzzle:
      type: object
      properties:
        puzzleDifficulty:
          type: integer
        originalNumbers:
          type: array
          items:
            type: integer
        